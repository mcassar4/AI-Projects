(define (domain Dungeon)

    (:requirements
        :typing
        :negative-preconditions
        :conditional-effects
    )

    ; Do not modify the types
    (:types
        location colour k corridor
    )

    ; Do not modify the constants
    (:constants
        red yellow green purple rainbow - colour
    )

    ; You may introduce whatever predicates you would like to use
    (:predicates
        (hero-at ?loc - location)
        ; (key-at ?k - k ?loc - location)
        
        ; (key-colour ?k - k ?col - colour)
        ; ; (key-one-use ?k - k)
        ; ; (key-two-use ?k - k)
        ; ; (key-multi-use ?k - k)

        ; (holding-key ?k - k)
        ; ; (stash-key ?k - k ?col - colour)

        (cor-between ?from ?to - location ?cor - corridor)
        ; (cor-valid ?cor - corridor)
        ; ; (is-risky ?cor - corridor)
        ; ; (is-collapsed ?cor - corridor)
        ; (cor-locked ?cor - corridor)

        ; (messy ?loc - location)
    )

    ; IMPORTANT: You should not change/add/remove the action names or parameters

    ;Hero can move if the
    ;    - hero is at current location ?from,
    ;    - hero will move to location ?to,
    ;    - corridor ?cor - corridor exists between the ?from and ?to locations
    ;    - there isn't a locked door in corridor ?cor - corridor
    ;Effects move the hero, and collapse the corridor if it's "risky" (also causing a mess in the ?to location)
    (:action move

        :parameters (?from ?to - location ?cor - corridor)

        :precondition (and
            (hero-at ?from) ;hero is at current location ?from
            (cor-between ?from ?to ?cor) ;corridor ?cor - corridor exists between the ?from and ?to locations
            ; (not (cor-locked ?cor)) ;there isn't a locked corridor ?cor - corridor
        )

        :effect (and
            (not (hero-at ?from))
            (hero-at ?to) ;move the hero
            ; (
            ;     ; (not (is-risky ?cor - corridor)) or ((messy ?from) and (messy ?to))
            ;     ;collapse the corridor if it's "risky" (also causing a mess in the ?to location)
            ; )
        )
    )
)
;     ;Hero can pick up a key if the
;     ;    - hero is at current location ?loc - location,
;     ;    - there is a key ?k - k at location ?loc - location,
;     ;    - the hero's arm is free,
;     ;    - the location is not messy
;     ;Effect will have the hero holding the key and their arm no longer being free
;     (:action pick-up

;         :parameters (?loc - location ?k - k)

;         :precondition (and
;             (hero-at ?loc)
;             (key-at ?k ?loc)
;             (not (holding-key ?k)) ;hero's arm is free
;             ; (not (messy ?loc - location)) ;room isnt messy (they should clean it first)
;         )

;         :effect (and
;             (not (key-at ?k ?loc)) ;remove key from the room
;             (holding-key ?k) ;hero is holding the key and arm not free
;         )
;     )

;     ;Hero can drop a key if the
;     ;    - hero is holding a key ?k - k,
;     ;    - the hero is at location ?loc - location
;     ;Effect will be that the hero is no longer holding the key
;     ; (:action drop

;     ;     :parameters (?loc - location ?k - k)

;     ;     :precondition (and
;     ;         ; (hero-at ?loc - location)
;     ;         ; (holding-key ?k - k)
;     ;     )

;     ;     :effect (and
;     ;         ; (not (holding-key ?k - k))
;     ;         ; (key-at ?loc - location)
;     ;     )
;     ; )


;     ;Hero can use a key for a corridor if
;     ;    - the hero is holding a key ?k - k,
;     ;    - the key still has some uses left,
;     ;    - the corridor ?cor - corridor is locked with colour ?col - colour,
;     ;    - the key ?k - k is if the right colour ?col - colour,
;     ;    - the hero is at location ?loc - location
;     ;    - the corridor is connected to the location ?loc - location
;     ;Effect will be that the corridor is unlocked and the key usage will be updated if necessary
;     (:action unlock

;         :parameters (?loc - location ?cor - corridor ?col - colour ?k - k)

;         :precondition (and
;             (hero-at ?loc) ;hero is at the location
;             ; ; (not (messy ?loc - location)) ;location isnt messy (they should clean first)
;             ; ; (cor-between ?loc ?cor ?to) ;corridor exists
;             (cor-valid ?cor);corridor exists
;             (cor-locked ?cor) ;corridor is locked with the specified colour
;             (holding-key ?k) ;hero holding a key
;             (key-colour ?k ?col) ;holding the right key!
;         )

;         :effect (and
;             (not (cor-locked ?cor))
;             (not (holding-key ?k))
;             (key-at ?k ?loc)
;             ; diminish key use
;             ; (stash-key ?k - k)
;         )
;     )

;     ;Hero can clean a location if
;     ;    - the hero is at location ?loc - location,
;     ;    - the location is messy
;     ;Effect will be that the location is no longer messy
;     ; (:action clean

;     ;     :parameters (?loc - location)

;     ;     :precondition (and
;     ;         (hero-at ?loc - location)
;     ;         (messy ?loc - location)
;     ;     )

;     ;     :effect (and
;     ;         (not (messy ?loc - location))
;     ;     )
;     ; )
; )